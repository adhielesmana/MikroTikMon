version: '3.8'

services:
  app:
    container_name: mikrotik-monitor-app
    image: mikrotikmon-app
    ports:
      - "5000:5000"
    environment:
      # Database connection - MUST point to the actual database container name
      - DATABASE_URL=postgresql://mikrotik_user:dz0OImAmBHV0xyz1BbwR5JM386UTga9R@mikrotik-monitor-db:5432/mikrotik_monitor
      
      # Session secret for encryption (change this to a random string)
      - SESSION_SECRET=${SESSION_SECRET:-change-this-to-a-random-secret-in-production}
      
      # Environment
      - NODE_ENV=production
      - PORT=5000
      
      # Optional: Email notifications (configure if needed)
      # - SMTP_HOST=smtp.gmail.com
      # - SMTP_PORT=587
      # - SMTP_USER=your-email@gmail.com
      # - SMTP_PASS=your-app-password
      # - SMTP_FROM_EMAIL=noreply@yourdomain.com
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - mikrotik-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    container_name: mikrotik-monitor-db
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=mikrotik_user
      - POSTGRES_PASSWORD=dz0OImAmBHV0xyz1BbwR5JM386UTga9R
      - POSTGRES_DB=mikrotik_monitor
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - mikrotik-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mikrotik_user -d mikrotik_monitor"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  mikrotik-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
