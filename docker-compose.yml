version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mikrotik-monitor-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PGDATABASE:-mikrotik_monitor}
      POSTGRES_USER: ${PGUSER:-mikrotik_user}
      POSTGRES_PASSWORD: ${PGPASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-mikrotik_user} -d ${PGDATABASE:-mikrotik_monitor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mikrotik-network

  # MikroTik Monitor Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mikrotik-monitor-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${PGUSER:-mikrotik_user}:${PGPASSWORD:-changeme}@postgres:5432/${PGDATABASE:-mikrotik_monitor}
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${PGUSER:-mikrotik_user}
      PGPASSWORD: ${PGPASSWORD:-changeme}
      PGDATABASE: ${PGDATABASE:-mikrotik_monitor}
      SESSION_SECRET: ${SESSION_SECRET}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-}
      REPL_ID: ${REPL_ID:-}
      ISSUER_URL: ${ISSUER_URL:-}
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      # Optional: Mount for logs
      - ./logs:/app/logs
    networks:
      - mikrotik-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: mikrotik-monitor-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - mikrotik-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  mikrotik-network:
    driver: bridge
